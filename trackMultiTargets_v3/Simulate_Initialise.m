%% Simulate_Initialise
% Author: Shen Kailun
% Date  : 2023-11-14

%功能：参数初始化 包含雷达系统参数初始化 跟踪器参数初始化等
s = sprintf("====Simulate_Initialise====");
disp(s);

%% 原点经纬高
origin_longitude = 120.610816;
origin_latitude = 31.329486;
origin_height = 426.5;

%% 雷达参数初始化
%雷达1
p = lla2ecef([31.329486  120.6222260000000 426.5], 'WGS84');
[x,y,z]=ecef2enu(p(1),p(2),p(3),...
            origin_latitude,...
            origin_longitude,...
            origin_height,wgs84Ellipsoid);
radar(1) = Radar([x,y,z], [120.6222260000000,31.329486,426.5],...
    [200 2e3], [-12 12],...
    [0.5 80], 'Singer',...
    0.5,20,0.1,0.1,1e-6,64e-4,0.99,1e-6,0.6,...
    [-300;-300;-300],[300;300;300],1,16,5,100,1);
%雷达2
p = lla2ecef([31.338476 120.610816 426.5], 'WGS84');
[x,y,z]=ecef2enu(p(1),p(2),p(3),...
            origin_latitude,...
            origin_longitude,...
            origin_height,wgs84Ellipsoid);
radar(2) = Radar([x,y,z], [120.610816,31.338476,426.5],...
    [200 2e3], [75 105],...
    [0.5 70], 'Singer',...
    0.5,15,0.1,0.1,1e-6,64e-4,0.99,1e-6,0.6,...
    [-300;-300;-300],[300;300;300],1,16,5,100,1);
radar_num= size(radar, 2);%雷达数量

%探测区域
% figure(1);
% th = linspace(pi/2+radar(1).detection_azimuth_range(1) * pi / 180,...
% pi/2+radar(1).detection_azimuth_range(2) * pi / 180,100);
% x = radar(1).detection_distance_range(2)*cos(th)+radar(1).location_enu(1);
% y = radar(1).detection_distance_range(2)*sin(th)+radar(1).location_enu(2);
% plot([x,radar(1).location_enu(1),x(1)],[y,radar(1).location_enu(2),y(1)],'-k');
% hold on;
% th = linspace(pi/2+radar(1).detection_azimuth_range(1) * pi / 180,...
% pi/2+radar(1).detection_azimuth_range(2) * pi / 180,100);
% x = radar(1).detection_distance_range(1)*cos(th)+radar(1).location_enu(1);
% y = radar(1).detection_distance_range(1)*sin(th)+radar(1).location_enu(2);
% plot([x,radar(1).location_enu(1),x(1)],[y,radar(1).location_enu(2),y(1)],'-r');
% 
% 
% th = linspace(-pi/2+radar(2).detection_azimuth_range(1) * pi / 180,...
% -pi/2+radar(2).detection_azimuth_range(2) * pi / 180,100);
% x = radar(2).detection_distance_range(2)*cos(th)+radar(2).location_enu(1);
% y = radar(2).detection_distance_range(2)*sin(th)+radar(2).location_enu(2);
% plot([x,radar(2).location_enu(1),x(1)],[y,radar(2).location_enu(2),y(1)],'-k');
% th = linspace(-pi/2+radar(2).detection_azimuth_range(1) * pi / 180,...
% -pi/2+radar(2).detection_azimuth_range(2) * pi / 180,100);
% x = radar(2).detection_distance_range(1)*cos(th)+radar(2).location_enu(1);
% y = radar(2).detection_distance_range(1)*sin(th)+radar(2).location_enu(2);
% plot([x,radar(2).location_enu(1),x(1)],[y,radar(2).location_enu(2),y(1)],'-r');
% grid on;
% title('双基地雷达探测范围');
% xlabel('m');
% ylabel('m');
%
% plot(savedata(:,5),savedata(:,8));

% plot(target2(:,5),target2(:,6));
% plot3(target3(:,5),target3(:,8),target3(:,11));
% plot(target4(:,5),target4(:,6));
%% 滤波器初始化
for index = 1 : radar_num
    switch radar(index).tracker_method % 可以扩充
        case 'KF'
            T = radar(index).T;
            F=[1 T 1/2*T^2 0 0 0 0 0 0 ;...
                0 1 T 0 0 0 0 0 0;...
                0 0 1 0 0 0 0 0 0;...
                0 0 0 1 T 1/2*T^2 0 0 0;...
                0 0 0 0 1 T 0 0 0;...
                0 0 0 0 0 1 0 0 0;...
                0 0 0 0 0 0 1 T T^2/2;...
                0 0 0 0 0 0 0 1 T;...
                0 0 0 0 0 0 0 0 1];%状态转移矩阵
            W=[50,0.3*pi/180,0.3*pi/180]';%量测噪声矩阵 x y z轴
            R=[20^2 0 0;0 20^2 0;0 0 20^2];%

            nvar=1e1;%过程噪声
            Q=nvar*[(T^5/20) (T^4/8)  (T^3/6) zeros(1,6);...
                (T^4/8) (T^3/2) (T^2/2) zeros(1,6);
                (T^3/6) (T^2/2) T zeros(1,6);
                zeros(1,3) (T^5/20) (T^4/8)  (T^3/6) zeros(1,3);
                zeros(1,3) (T^4/8) (T^3/2)  (T^2/2) zeros(1,3);
                zeros(1,3) (T^3/6) (T^2/2) T zeros(1,3);...
                zeros(1,6) (T^5/20) (T^4/8)  (T^3/6);
                zeros(1,6) (T^4/8) (T^3/2) (T^2/2);
                zeros(1,6) (T^3/6) (T^2/2) T];%过程噪声
            H=[1 0 0 0 0 0 0 0 0 ;
                0 0 0 1 0 0 0 0 0 ;
                0 0 0 0 0 0 1 0 0 ];%观测矩阵
            radar(index).tracker =  KalmanFilter(F, H, Q, R);

        case 'EKF'
            T = radar(index).T;
            F=[1 T 1/2*T^2 0 0 0 0 0 0 ;...
                0 1 T 0 0 0 0 0 0;...
                0 0 1 0 0 0 0 0 0;...
                0 0 0 1 T 1/2*T^2 0 0 0;...
                0 0 0 0 1 T 0 0 0;...
                0 0 0 0 0 1 0 0 0;...
                0 0 0 0 0 0 1 T T^2/2;...
                0 0 0 0 0 0 0 1 T;...
                0 0 0 0 0 0 0 0 1];%状态转移矩阵
%             syms x x_1 x_2 y y_1 y_2 z z_1 z_2
%             state = [x,x_1,x_2,y,y_1,y_2,z,z_1,z_2];
%             jacobian_F = jacobian(F*state',state);
            jacobian_F=[1 T 1/2*T^2 0 0 0 0 0 0 ;...
                0 1 T 0 0 0 0 0 0;...
                0 0 1 0 0 0 0 0 0;...
                0 0 0 1 T 1/2*T^2 0 0 0;...
                0 0 0 0 1 T 0 0 0;...
                0 0 0 0 0 1 0 0 0;...
                0 0 0 0 0 0 1 T T^2/2;...
                0 0 0 0 0 0 0 1 T;...
                0 0 0 0 0 0 0 0 1];
            nvar=1e1;%过程噪声
            Q=nvar*[(T^5/20) (T^4/8)  (T^3/6) zeros(1,6);...
                (T^4/8) (T^3/2) (T^2/2) zeros(1,6);
                (T^3/6) (T^2/2) T zeros(1,6);
                zeros(1,3) (T^5/20) (T^4/8)  (T^3/6) zeros(1,3);
                zeros(1,3) (T^4/8) (T^3/2)  (T^2/2) zeros(1,3);
                zeros(1,3) (T^3/6) (T^2/2) T zeros(1,3);...
                zeros(1,6) (T^5/20) (T^4/8)  (T^3/6);
                zeros(1,6) (T^4/8) (T^3/2) (T^2/2);
                zeros(1,6) (T^3/6) (T^2/2) T];%过程噪声

%             syms x x_1 x_2 y y_1 y_2 z z_1 z_2
%             state = [x,x_1,x_2,y,y_1,y_2,z,z_1,z_2];
%             H = [sqrt(x^2+y^2+z^2);atan(y/x);atan(z/sqrt(x^2+y^2))];
% %             H = [sqrt(x^2+y^2+z^2);atan(x/y);atan(z/sqrt(x^2+y^2))];
% %             jacobian_H = jacobian(H,state);
%             jacobian_H = [x/(x^2 + y^2 + z^2)^(1/2),0,0,y/(x^2 + y^2 + z^2)^(1/2),0,0,z/(x^2 + y^2 + z^2)^(1/2),0,0;...
%                 -y/(x^2*(y^2/x^2 + 1)),0,0,1/(x*(y^2/x^2 + 1)),0,0,0,0,0;...
%                 -(x*z)/((z^2/(x^2 + y^2) + 1)*(x^2 + y^2)^(3/2)),0,0,-(y*z)/((z^2/(x^2 + y^2) + 1)*(x^2 + y^2)^(3/2)),0,0,1/((z^2/(x^2 + y^2) + 1)*(x^2 + y^2)^(1/2)),0,0];
%             H = matlabFunction(H);
%             jacobian_H = matlabFunction(jacobian_H);

            W=[50,0.3*pi/180,0.3*pi/180]';%量测噪声矩阵 ρ theta fai
            R=[20^2 0 0;0 (0.1*pi/180)^2 0;0 0 (0.1*pi/180)^2];%
%             radar(index).tracker =  ExtentedKalmanFilter(F, jacobian_F, H, jacobian_H, Q, R);
            radar(index).tracker =  ExtentedKalmanFilter(F, jacobian_F, Q, R);

        case 'UKF'

        case 'Singer'
            T = radar(index).T;
            W=[50,0.4*pi/180,0.4*pi/180]';%量测噪声矩阵 x y z轴
            R=[50^2 0 0;0 50^2 0;0 0 50^2];%
            H=[1 0 0 0 0 0 0 0 0 ;
                0 0 0 1 0 0 0 0 0 ;
                0 0 0 0 0 0 1 0 0 ];%观测矩阵
            
            radar(index).tracker =  Singer(0.65,0.65,0.65,...
                                         0.25,0.25,0.25,...
                                         30,30,30,...
                                         1/20,1/20,1/20,...
                                         T,R,H);            
            
    end

end

%% 融合初始化
% fusion = Fusion('KF',0.2,16,5);
fusion = Fusion([origin_longitude, origin_latitude,origin_height],'KF',0.2,16,5,radar);
switch fusion.tracker_method % 可以扩充
    case 'KF'
        T = radar(index).T;
        F=[1 T 1/2*T^2 0 0 0 0 0 0 ;...
            0 1 T 0 0 0 0 0 0;...
            0 0 1 0 0 0 0 0 0;...
            0 0 0 1 T 1/2*T^2 0 0 0;...
            0 0 0 0 1 T 0 0 0;...
            0 0 0 0 0 1 0 0 0;...
            0 0 0 0 0 0 1 T T^2/2;...
            0 0 0 0 0 0 0 1 T;...
            0 0 0 0 0 0 0 0 1];%状态转移矩阵
        W=[50,0.3*pi/180,0.3*pi/180]';%量测噪声矩阵 x y z轴
        R=[20^2 0 0;0 20^2 0;0 0 20^2];%

        nvar=1e1;%过程噪声
        Q=nvar*[(T^5/20) (T^4/8)  (T^3/6) zeros(1,6);...
            (T^4/8) (T^3/2) (T^2/2) zeros(1,6);
            (T^3/6) (T^2/2) T zeros(1,6);
            zeros(1,3) (T^5/20) (T^4/8)  (T^3/6) zeros(1,3);
            zeros(1,3) (T^4/8) (T^3/2)  (T^2/2) zeros(1,3);
            zeros(1,3) (T^3/6) (T^2/2) T zeros(1,3);...
            zeros(1,6) (T^5/20) (T^4/8)  (T^3/6);
            zeros(1,6) (T^4/8) (T^3/2) (T^2/2);
            zeros(1,6) (T^3/6) (T^2/2) T];%过程噪声
        H=[1 0 0 0 0 0 0 0 0 ;
            0 0 0 1 0 0 0 0 0 ;
            0 0 0 0 0 0 1 0 0 ];%观测矩阵
        fusion.tracker =  KalmanFilter(F, H, Q, R);
    case 'EKF'
        T = radar(index).T;
        F=[1 T 1/2*T^2 0 0 0 0 0 0 ;...
            0 1 T 0 0 0 0 0 0;...
            0 0 1 0 0 0 0 0 0;...
            0 0 0 1 T 1/2*T^2 0 0 0;...
            0 0 0 0 1 T 0 0 0;...
            0 0 0 0 0 1 0 0 0;...
            0 0 0 0 0 0 1 T T^2/2;...
            0 0 0 0 0 0 0 1 T;...
            0 0 0 0 0 0 0 0 1];%状态转移矩阵
        syms x x_1 x_2 y y_1 y_2 z z_1 z_2
        state = [x,x_1,x_2,y,y_1,y_2,z,z_1,z_2];
        jacobian_F = jacobian(F*state',state);
%         jacobian_F=[1 T 1/2*T^2 0 0 0 0 0 0 ;...
%                 0 1 T 0 0 0 0 0 0;...
%                 0 0 1 0 0 0 0 0 0;...
%                 0 0 0 1 T 1/2*T^2 0 0 0;...
%                 0 0 0 0 1 T 0 0 0;...
%                 0 0 0 0 0 1 0 0 0;...
%                 0 0 0 0 0 0 1 T T^2/2;...
%                 0 0 0 0 0 0 0 1 T;...
%                 0 0 0 0 0 0 0 0 1];
        nvar=1e1;%过程噪声
        Q=nvar*[(T^5/20) (T^4/8)  (T^3/6) zeros(1,6);...
            (T^4/8) (T^3/2) (T^2/2) zeros(1,6);
            (T^3/6) (T^2/2) T zeros(1,6);
            zeros(1,3) (T^5/20) (T^4/8)  (T^3/6) zeros(1,3);
            zeros(1,3) (T^4/8) (T^3/2)  (T^2/2) zeros(1,3);
            zeros(1,3) (T^3/6) (T^2/2) T zeros(1,3);...
            zeros(1,6) (T^5/20) (T^4/8)  (T^3/6);
            zeros(1,6) (T^4/8) (T^3/2) (T^2/2);
            zeros(1,6) (T^3/6) (T^2/2) T];%过程噪声

        syms x x_1 x_2 y y_1 y_2 z z_1 z_2
        state = [x,x_1,x_2,y,y_1,y_2,z,z_1,z_2];
        H = [sqrt(x^2+y^2+z^2);atan(y/x);atan(z/sqrt(x^2+y^2))];
        jacobian_H = jacobian(H,state);
        H = matlabFunction(H);
        jacobian_H = matlabFunction(jacobian_H);
        W=[50,0.3*pi/180,0.3*pi/180]';%量测噪声矩阵 x y z轴
        R=[20^2 0 0;0 0.1^2 0;0 0 0.1^2];%
        fusion.tracker =  ExtentedKalmanFilter_v1(F, jacobian_F, H, jacobian_H, Q, R);
%         fusion.tracker =  ExtentedKalmanFilter(F, jacobian_F, Q, R);
    case 'UKF'

end
